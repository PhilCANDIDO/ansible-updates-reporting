---
# AWX-Compatible Connection Test Playbook
# Tests connectivity with AWX artifact support

- name: "Initialize Test Environment"
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - vars/awx_mode.yml
  tasks:
    - name: "Display execution mode"
      debug:
        msg: |
          Execution Mode: {{ 'AWX/Tower' if is_awx_environment else 'Standard Ansible' }}
          Test Started: {{ lookup('pipe', 'date -Iseconds') }}
          
    - name: "Initialize test results"
      set_fact:
        test_results: []
        test_start_time: "{{ lookup('pipe', 'date -Iseconds') }}"
      
- name: "Test Connection to All Managed Nodes"
  hosts: all:!localhost
  gather_facts: false
  serial: "{{ test_serial | default('100%') }}"
  vars_files:
    - vars/awx_mode.yml
  tasks:
    - name: "Test connectivity"
      ping:
      register: ping_result
      ignore_errors: yes
      
    - name: "Gather basic facts if ping successful"
      setup:
        gather_subset: 
          - "!all"
          - "!min"
          - "network"
          - "distribution"
      when: ping_result is succeeded
      register: facts_result
      
    - name: "Store test results"
      set_fact:
        host_test_result:
          hostname: "{{ inventory_hostname }}"
          ansible_host: "{{ ansible_host | default(inventory_hostname) }}"
          connection_status: "{{ 'SUCCESS' if ping_result is succeeded else 'FAILED' }}"
          ping_response: "{{ ping_result.ping | default('No response') }}"
          error_message: "{{ ping_result.msg | default('') if ping_result is failed else '' }}"
          os_family: "{{ ansible_os_family | default('Unknown') }}"
          distribution: "{{ ansible_distribution | default('Unknown') }} {{ ansible_distribution_version | default('') }}"
          ip_address: "{{ ansible_default_ipv4.address | default('N/A') }}"
          test_timestamp: "{{ lookup('pipe', 'date -Iseconds') }}"
      
    - name: "Add to test results"
      set_fact:
        test_results: "{{ hostvars['localhost']['test_results'] + [host_test_result] }}"
      delegate_to: localhost
      delegate_facts: true

- name: "Generate Test Report"
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - vars/awx_mode.yml
  tasks:
    - name: "Calculate statistics"
      set_fact:
        total_hosts: "{{ test_results | length }}"
        successful_connections: "{{ test_results | selectattr('connection_status', 'equalto', 'SUCCESS') | list | length }}"
        failed_connections: "{{ test_results | selectattr('connection_status', 'equalto', 'FAILED') | list | length }}"
        success_rate: "{{ ((test_results | selectattr('connection_status', 'equalto', 'SUCCESS') | list | length) / (test_results | length) * 100) | round(2) if test_results | length > 0 else 0 }}"
        
    - name: "Display summary"
      debug:
        msg: |
          ==========================================
          Connection Test Results
          ==========================================
          Test Started: {{ test_start_time }}
          Test Completed: {{ lookup('pipe', 'date -Iseconds') }}
          
          Total Hosts: {{ total_hosts }}
          Successful: {{ successful_connections }}
          Failed: {{ failed_connections }}
          Success Rate: {{ success_rate }}%
          
          {% if failed_connections > 0 %}
          Failed Hosts:
          {% for host in test_results | selectattr('connection_status', 'equalto', 'FAILED') | list %}
          - {{ host.hostname }}: {{ host.error_message }}
          {% endfor %}
          {% endif %}
          
          Successful Hosts by OS:
          {% for os, hosts in test_results | selectattr('connection_status', 'equalto', 'SUCCESS') | groupby('os_family') %}
          - {{ os }}: {{ hosts | length }} hosts
          {% endfor %}
          ==========================================
          
    - name: "Create test report JSON"
      copy:
        content: |
          {
            "test_type": "connection_test",
            "execution_mode": "{{ 'awx' if is_awx_environment else 'standard' }}",
            "test_start": "{{ test_start_time }}",
            "test_end": "{{ lookup('pipe', 'date -Iseconds') }}",
            "summary": {
              "total_hosts": {{ total_hosts }},
              "successful": {{ successful_connections }},
              "failed": {{ failed_connections }},
              "success_rate": {{ success_rate }}
            },
            "hosts": {{ test_results | to_nice_json }}
          }
        dest: "{{ reports_storage_path | default('/tmp') }}/connection_test_{{ awx_job_id | default('manual') }}.json"
        mode: '0644'
      when: is_awx_environment or save_test_results | default(false)
      
    - name: "Register as AWX artifact"
      set_stats:
        data:
          test_summary:
            total_hosts: "{{ total_hosts }}"
            successful: "{{ successful_connections }}"
            failed: "{{ failed_connections }}"
            success_rate: "{{ success_rate }}"
          artifacts:
            test_report: "{{ reports_storage_path }}/connection_test_{{ awx_job_id }}.json"
        per_host: false
      when: is_awx_environment
      
    - name: "Display failed hosts details"
      debug:
        msg: |
          Failed Host: {{ item.hostname }}
          Error: {{ item.error_message }}
      loop: "{{ test_results | selectattr('connection_status', 'equalto', 'FAILED') | list }}"
      when: failed_connections > 0
      loop_control:
        label: "{{ item.hostname }}"