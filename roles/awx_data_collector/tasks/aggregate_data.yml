---
# AWX Data Aggregation Tasks

- name: "(awx_aggregate) Gather all cached host facts"
  set_fact:
    all_hosts_data: "{{ groups['all'] | map('extract', hostvars, 'host_updates_data') | select('defined') | list }}"
  run_once: true
  tags: [awx, aggregation, facts]

- name: "(awx_aggregate) Calculate aggregated metrics"
  set_fact:
    aggregated_metrics:
      total_hosts: "{{ all_hosts_data | length }}"
      total_updates: "{{ all_hosts_data | map(attribute='updates.total_count') | select('defined') | map('int') | sum }}"
      total_security_updates: "{{ all_hosts_data | map(attribute='updates.security_count') | select('defined') | map('int') | sum }}"
      hosts_requiring_reboot: "{{ all_hosts_data | selectattr('requires_reboot', 'equalto', true) | list | length }}"
      collection_timestamp: "{{ ansible_date_time.iso8601 }}"
      execution_id: "{{ execution_id | default(awx_job_id) }}"
  run_once: true
  tags: [awx, aggregation, metrics]

- name: "(awx_aggregate) Create consolidated report structure"
  set_fact:
    consolidated_report:
      metadata:
        execution_id: "{{ execution_id | default(awx_job_id) }}"
        timestamp: "{{ ansible_date_time.iso8601 }}"
        awx_job_id: "{{ awx_job_id if is_awx_environment else 'N/A' }}"
        total_hosts: "{{ aggregated_metrics.total_hosts }}"
      summary: "{{ aggregated_metrics }}"
      hosts: "{{ all_hosts_data }}"
      security_analysis:
        critical_hosts: "{{ all_hosts_data | selectattr('updates.security_count', 'defined') | selectattr('updates.security_count', '>', security_thresholds.critical_updates | default(5)) | list | map(attribute='hostname') | list }}"
        hosts_with_security_updates: "{{ all_hosts_data | selectattr('updates.security_count', 'defined') | selectattr('updates.security_count', '>', 0) | list | map(attribute='hostname') | list }}"
      by_os_family: "{{ all_hosts_data | groupby('os_family') }}"
  run_once: true
  tags: [awx, aggregation, report]

- name: "(awx_aggregate) Store consolidated report as AWX artifact"
  block:
    - name: "(awx_aggregate) Write consolidated report file"
      copy:
        content: "{{ consolidated_report | to_nice_json }}"
        dest: "{{ consolidated_reports_path }}/consolidated_{{ awx_job_id }}.json"
        mode: '0644'
      delegate_to: "{{ 'localhost' if not disable_localhost_delegation else omit }}"
      run_once: true
      
    - name: "(awx_aggregate) Register consolidated report in AWX stats"
      set_stats:
        data:
          artifacts:
            consolidated_report: "{{ consolidated_reports_path }}/consolidated_{{ awx_job_id }}.json"
          summary:
            total_hosts: "{{ aggregated_metrics.total_hosts }}"
            total_updates: "{{ aggregated_metrics.total_updates }}"
            total_security_updates: "{{ aggregated_metrics.total_security_updates }}"
            hosts_requiring_reboot: "{{ aggregated_metrics.hosts_requiring_reboot }}"
            critical_hosts_count: "{{ consolidated_report.security_analysis.critical_hosts | length }}"
        per_host: false
        aggregate: false
      when: use_set_stats
      run_once: true
  when: is_awx_environment
  tags: [awx, artifacts, consolidation]

- name: "(awx_aggregate) Generate summary for AWX UI"
  set_stats:
    data:
      job_summary: |
        Updates Report Summary:
        - Total Hosts Scanned: {{ aggregated_metrics.total_hosts }}
        - Total Updates Available: {{ aggregated_metrics.total_updates }}
        - Security Updates: {{ aggregated_metrics.total_security_updates }}
        - Hosts Requiring Reboot: {{ aggregated_metrics.hosts_requiring_reboot }}
        - Critical Security Hosts: {{ consolidated_report.security_analysis.critical_hosts | length }}
    per_host: false
  when:
    - is_awx_environment
    - use_set_stats
  run_once: true
  tags: [awx, stats, summary]

- name: "(awx_aggregate) Store consolidated data in facts for later use"
  set_fact:
    consolidated_data: "{{ consolidated_report }}"
    cacheable: "{{ use_cacheable_facts }}"
  run_once: true
  tags: [awx, facts, storage]