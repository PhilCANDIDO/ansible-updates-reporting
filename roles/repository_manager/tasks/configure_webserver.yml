---
- name: "(configure_webserver) Install webserver packages"
  package:
    name: "{{ current_webserver_packages }}"
    state: present
  become: true
  tags: [setup, webserver, packages]

- name: "(configure_webserver) Install Python dependencies for Excel generation"
  pip:
    name:
      - openpyxl
      - pandas
    state: present
  become: true
  tags: [setup, packages, python]

- name: "(configure_webserver) Enable Apache modules (Debian/Ubuntu)"
  apache2_module:
    name: "{{ item }}"
    state: present
  loop: "{{ apache_modules[ansible_os_family] }}"
  when: 
    - webserver_type == 'apache'
    - ansible_os_family == 'Debian'
  become: true
  notify: "restart {{ webserver_type }}"
  tags: [setup, webserver, modules]

- name: "(configure_webserver) Enable Apache modules (SUSE)"
  command: "a2enmod {{ item }}"
  loop: "{{ apache_modules[ansible_os_family] }}"
  when: 
    - webserver_type == 'apache'
    - ansible_os_family == 'Suse'
  become: true
  notify: "restart {{ webserver_type }}"
  changed_when: false
  tags: [setup, webserver, modules]

- name: "(configure_webserver) Generate webserver configuration"
  template:
    src: "{{ webserver_type }}_site.conf.j2"
    dest: "{{ current_webserver_config_path }}/updates-reports.conf"
    backup: true
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: "restart {{ webserver_type }}"
  tags: [setup, webserver, config]

- name: "(configure_webserver) Enable site configuration (Debian/Ubuntu Apache)"
  command: "a2ensite updates-reports.conf"
  when: 
    - webserver_type == 'apache'
    - ansible_os_family == 'Debian'
  become: true
  notify: "restart {{ webserver_type }}"
  changed_when: false
  tags: [setup, webserver, enable_site]

- name: "(configure_webserver) Enable site configuration (SUSE Apache)"
  command: "a2ensite updates-reports"
  when: 
    - webserver_type == 'apache'
    - ansible_os_family == 'Suse'
  become: true
  notify: "restart {{ webserver_type }}"
  changed_when: false
  tags: [setup, webserver, enable_site]

- name: "(configure_webserver) Create nginx site symlink (Debian/Ubuntu)"
  file:
    src: "{{ current_webserver_config_path }}/updates-reports.conf"
    dest: "{{ current_webserver_enabled_path }}/updates-reports.conf"
    state: link
  when: 
    - webserver_type == 'nginx'
    - ansible_os_family == 'Debian'
  become: true
  notify: "restart {{ webserver_type }}"
  tags: [setup, webserver, enable_site]

- name: "(configure_webserver) Configure SELinux for Apache (RedHat family)"
  seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  loop: "{{ selinux_booleans }}"
  when: 
    - ansible_os_family == 'RedHat'
    - webserver_type == 'apache'
    - configure_selinux | bool
    - ansible_selinux.status == 'enabled'
  become: true
  tags: [setup, webserver, selinux]

- name: "(configure_webserver) Set SELinux context for repository directory (RedHat family)"
  sefcontext:
    target: "{{ repository_base_path }}(/.*)?"
    setype: httpd_exec_t
    state: present
  when: 
    - ansible_os_family == 'RedHat'
    - webserver_type == 'apache'
    - configure_selinux | bool
    - ansible_selinux.status == 'enabled'
  become: true
  tags: [setup, webserver, selinux]

- name: "(configure_webserver) Apply SELinux context to repository directory (RedHat family)"
  command: "restorecon -R {{ repository_base_path }}"
  when: 
    - ansible_os_family == 'RedHat'
    - webserver_type == 'apache'
    - configure_selinux | bool
    - ansible_selinux.status == 'enabled'
  become: true
  changed_when: false
  tags: [setup, webserver, selinux]

- name: "(configure_webserver) Configure firewall - firewalld (RedHat family)"
  firewalld:
    service: "{{ 'https' if enable_ssl else 'http' }}"
    permanent: true
    state: enabled
    immediate: true
  when: 
    - ansible_os_family == 'RedHat'
    - configure_firewall | bool
  become: true
  tags: [setup, webserver, firewall]

- name: "(configure_webserver) Configure firewall - ufw (Debian family)"
  ufw:
    rule: allow
    port: "{{ item.split('/')[0] }}"
    proto: "{{ item.split('/')[1] }}"
  loop: "{{ firewall_ports }}"
  when: 
    - ansible_os_family == 'Debian'
    - configure_firewall | bool
  become: true
  tags: [setup, webserver, firewall]

- name: "(configure_webserver) Ensure webserver is started and enabled"
  service:
    name: "{{ current_webserver_service }}"
    state: started
    enabled: true
  become: true
  tags: [setup, webserver, service]

- name: "(configure_webserver) Verify webserver configuration"
  command: "{{ 'nginx -t' if webserver_type == 'nginx' else 'httpd -t' if ansible_os_family == 'RedHat' else 'apache2ctl -t' }}"
  register: webserver_config_test
  become: true
  changed_when: false
  failed_when: webserver_config_test.rc != 0
  tags: [setup, webserver, validation]

- name: "(configure_webserver) Display webserver configuration test results"
  debug:
    msg: "Webserver configuration test: {{ webserver_config_test.stdout }}"
  tags: [setup, webserver, validation]