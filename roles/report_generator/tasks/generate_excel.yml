---
- name: "(generate_excel) Check Python version and pip availability"
  command: python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')"
  register: python_version_check
  delegate_to: localhost
  run_once: true
  changed_when: false
  tags: [generation, excel, dependencies, validation]

- name: "(generate_excel) Display Python version"
  debug:
    msg: "Python version detected: {{ python_version_check.stdout }}"
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, dependencies, info]

- name: "(generate_excel) Ensure pip is available"
  package:
    name: 
      - python3-pip
      - python3-dev
      - python3-setuptools
    state: present
  delegate_to: localhost
  run_once: true
  become: true
  tags: [generation, excel, dependencies, pip]

- name: "(generate_excel) Check if openpyxl is already installed"
  command: python3 -c "import openpyxl; print(openpyxl.__version__)"
  register: openpyxl_check
  delegate_to: localhost
  run_once: true
  failed_when: false
  changed_when: false
  tags: [generation, excel, dependencies, check]

- name: "(generate_excel) Display openpyxl status"
  debug:
    msg: "openpyxl status: {{ 'installed (version ' + openpyxl_check.stdout + ')' if openpyxl_check.rc == 0 else 'not installed' }}"
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, dependencies, info]

- name: "(generate_excel) Install Python Excel dependencies"
  pip:
    name:
      - openpyxl>=3.0.0
      - pandas>=1.3.0
    state: present
    executable: pip3
  delegate_to: localhost
  run_once: true
  become: true
  when: openpyxl_check.rc != 0
  register: pip_install_result
  tags: [generation, excel, dependencies, install]

- name: "(generate_excel) Verify openpyxl installation after pip install"
  command: python3 -c "import openpyxl; import pandas; print('Dependencies OK')"
  register: dependencies_verification
  delegate_to: localhost
  run_once: true
  changed_when: false
  when: openpyxl_check.rc != 0
  tags: [generation, excel, dependencies, verify]

- name: "(generate_excel) Handle dependency installation failure"
  fail:
    msg: |
      Failed to install required Python dependencies for Excel generation.
      Error: {{ pip_install_result.stderr | default('Unknown error') }}
      Fallback: CSV generation will be used instead.
  when: 
    - openpyxl_check.rc != 0
    - dependencies_verification is defined
    - dependencies_verification.rc != 0
  tags: [generation, excel, dependencies, error]

- name: "(generate_excel) Set Excel generation capability flag"
  set_fact:
    excel_generation_available: "{{ openpyxl_check.rc == 0 or (dependencies_verification is defined and dependencies_verification.rc == 0) }}"
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, dependencies, status]

- name: "(generate_excel) Generate Excel workbook data"
  template:
    src: excel_data.json.j2
    dest: "{{ control_node_reports_path }}/excel/excel_data_{{ execution_id }}.json"
    mode: '0644'
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, data]

- name: "(generate_excel) Create Excel generation script"
  template:
    src: generate_excel.py.j2
    dest: "{{ control_node_reports_path }}/excel/generate_excel.py"
    mode: '0755'
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, script]

- name: "(generate_excel) Execute Excel generation script"
  command: >
    python3 {{ control_node_reports_path }}/excel/generate_excel.py
    {{ control_node_reports_path }}/excel/excel_data_{{ execution_id }}.json
    {{ control_node_reports_path }}/excel/consolidated_report_{{ execution_id }}.xlsx
  delegate_to: localhost
  run_once: true
  register: excel_generation_result
  when: excel_generation_available | bool
  tags: [generation, excel, execute]

- name: "(generate_excel) Handle Excel generation success"
  debug:
    msg: |
      Excel file generated successfully:
      - File: {{ control_node_reports_path }}/excel/consolidated_report_{{ execution_id }}.xlsx
      - Dependencies: openpyxl {{ openpyxl_check.stdout if openpyxl_check.rc == 0 else 'newly installed' }}
  when: 
    - excel_generation_available | bool
    - excel_generation_result.rc == 0
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, success]

- name: "(generate_excel) Handle Excel generation errors"
  debug:
    msg: |
      Excel generation failed: {{ excel_generation_result.stderr | default('Unknown error') }}
      Stdout: {{ excel_generation_result.stdout | default('No output') }}
      Fallback: Creating CSV file instead
  when: 
    - excel_generation_available | bool
    - excel_generation_result.rc != 0
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, error]

- name: "(generate_excel) Generate CSV fallback when Excel not available"
  template:
    src: consolidated_report.csv.j2
    dest: "{{ control_node_reports_path }}/excel/consolidated_report_{{ execution_id }}.csv"
    mode: '0644'
  delegate_to: localhost
  run_once: true
  when: 
    - not (excel_generation_available | bool) or 
      (excel_generation_result is defined and excel_generation_result.rc != 0)
  tags: [generation, excel, fallback]

- name: "(generate_excel) Generate CSV fallback for failed Excel generation"
  template:
    src: consolidated_report.csv.j2
    dest: "{{ control_node_reports_path }}/excel/consolidated_report_{{ execution_id }}.csv"
    mode: '0644'
  delegate_to: localhost
  run_once: true
  when: 
    - excel_generation_available | bool
    - excel_generation_result is defined
    - excel_generation_result.rc != 0
  tags: [generation, excel, fallback]

- name: "(generate_excel) Cleanup temporary files"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ control_node_reports_path }}/excel/excel_data_{{ execution_id }}.json"
    - "{{ control_node_reports_path }}/excel/generate_excel.py"
  delegate_to: localhost
  run_once: true
  tags: [generation, excel, cleanup]

- name: "(generate_excel) Display Excel generation summary"
  debug:
    msg: |
      Excel Report Generation Summary:
      - Excel dependencies available: {{ excel_generation_available | bool }}
      - Generation method: {{ 'Excel (.xlsx)' if (excel_generation_available and excel_generation_result.rc == 0) else 'CSV fallback' }}
      - File location: {{ control_node_reports_path }}/excel/
      - Filename: consolidated_report_{{ execution_id }}.{{ 'xlsx' if (excel_generation_available and excel_generation_result.rc == 0) else 'csv' }}
      - Hosts included: {{ aggregated_data.hosts | length }}
      - Errors included: {{ aggregated_data.errors | length }}
      - Python version: {{ python_version_check.stdout }}
      - openpyxl status: {{ 'available' if excel_generation_available else 'not available' }}
  run_once: true
  tags: [generation, excel, summary]