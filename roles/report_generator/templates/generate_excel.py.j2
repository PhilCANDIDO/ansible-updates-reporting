#!/usr/bin/env python3
"""
Excel Report Generator for Ansible Updates Reporting
Generated by Ansible role: report_generator
Execution ID: {{ execution_id }}
"""

import json
import sys
import os
from datetime import datetime

# Vérification préalable des dépendances
def check_dependencies():
    """Check if required dependencies are available"""
    missing_deps = []
    
    try:
        import openpyxl
        print(f"✓ openpyxl version {openpyxl.__version__} is available")
    except ImportError as e:
        missing_deps.append(f"openpyxl: {str(e)}")
    
    try:
        import pandas
        print(f"✓ pandas version {pandas.__version__} is available")
    except ImportError as e:
        missing_deps.append(f"pandas: {str(e)}")
    
    if missing_deps:
        print("ERROR: Missing required dependencies:")
        for dep in missing_deps:
            print(f"  - {dep}")
        print("\nTo install missing dependencies, run:")
        print("  pip3 install openpyxl pandas")
        print("  # or")
        print("  apt-get install python3-openpyxl python3-pandas  # on Debian/Ubuntu")
        print("  yum install python3-openpyxl python3-pandas      # on RHEL/CentOS")
        return False
    
    return True

def create_excel_report(data_file, output_file):
    """Create Excel report from JSON data"""
    
    if not check_dependencies():
        print("ERROR: Cannot generate Excel file due to missing dependencies")
        return False
    
    # Import après vérification
    try:
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
        from openpyxl.utils import get_column_letter
        import pandas as pd
    except ImportError as e:
        print(f"ERROR: Failed to import required modules: {str(e)}")
        return False
    
    try:
        print(f"Loading data from: {data_file}")
        # Load data
        with open(data_file, 'r') as f:
            data = json.load(f)
        
        print("Creating Excel workbook...")
        # Create workbook
        wb = Workbook()
        
        # Remove default sheet
        wb.remove(wb.active)
        
        print("Creating summary sheet...")
        # Create summary sheet
        create_summary_sheet(wb, data)
        
        print("Creating hosts sheet...")
        # Create hosts sheet
        create_hosts_sheet(wb, data)
        
        # Create errors sheet if errors exist
        if data.get('errors', []):
            print("Creating errors sheet...")
            create_errors_sheet(wb, data)
        
        print("Creating packages sheet...")
        # Create packages sheet
        create_packages_sheet(wb, data)
        
        print(f"Saving workbook to: {output_file}")
        # Save workbook
        wb.save(output_file)
        print(f"SUCCESS: Excel report saved to: {output_file}")
        
        # Vérification que le fichier a été créé
        if os.path.exists(output_file):
            file_size = os.path.getsize(output_file)
            print(f"File size: {file_size} bytes")
            return True
        else:
            print("ERROR: Output file was not created")
            return False
        
    except FileNotFoundError as e:
        print(f"ERROR: Input file not found: {str(e)}")
        return False
    except json.JSONDecodeError as e:
        print(f"ERROR: Invalid JSON data: {str(e)}")
        return False
    except PermissionError as e:
        print(f"ERROR: Permission denied: {str(e)}")
        return False
    except Exception as e:
        print(f"ERROR: Failed to create Excel report: {str(e)}")
        print(f"Exception type: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return False

def create_summary_sheet(wb, data):
    """Create summary worksheet"""
    try:
        ws = wb.create_sheet("Summary", 0)
        
        # Headers
        ws['A1'] = "System Updates Report Summary"
        ws['A1'].font = Font(size=16, bold=True)
        ws.merge_cells('A1:D1')
        
        # Summary data
        summary = data.get('summary', {})
        row = 3
        
        summary_items = [
            ("Execution ID", "{{ execution_id }}"),
            ("Generation Time", data.get('metadata', {}).get('generation_timestamp', '')),
            ("Total Hosts", summary.get('total_hosts', 0)),
            ("Hosts Processed", summary.get('hosts_processed', 0)),
            ("Hosts with Errors", summary.get('hosts_with_errors', 0)),
            ("Total Updates", summary.get('total_updates', 0)),
            ("Security Updates", summary.get('total_security_updates', 0)),
            ("Critical Hosts", summary.get('critical_hosts', 0)),
            ("Hosts Requiring Reboot", summary.get('hosts_requiring_reboot', 0)),
            ("Overall Priority", summary.get('overall_priority', 'UNKNOWN'))
        ]
        
        for label, value in summary_items:
            ws[f'A{row}'] = label
            ws[f'B{row}'] = value
            ws[f'A{row}'].font = Font(bold=True)
            row += 1
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width
            
    except Exception as e:
        print(f"ERROR in create_summary_sheet: {str(e)}")
        raise

def create_hosts_sheet(wb, data):
    """Create hosts worksheet"""
    try:
        ws = wb.create_sheet("Hosts")
        
        # Headers
        headers = [
            "Hostname", "FQDN", "IP Address", "Distribution", "Version", 
            "Architecture", "Total Updates", "Security Updates", "Critical Level",
            "Requires Reboot", "Collection Method", "Status", "Error Message"
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
        
        # Host data
        hosts = data.get('hosts', [])
        for row, host in enumerate(hosts, 2):
            ws.cell(row=row, column=1, value=host.get('hostname', ''))
            ws.cell(row=row, column=2, value=host.get('fqdn', ''))
            ws.cell(row=row, column=3, value=host.get('ip_address', ''))
            ws.cell(row=row, column=4, value=host.get('distribution', ''))
            ws.cell(row=row, column=5, value=host.get('version', ''))
            ws.cell(row=row, column=6, value=host.get('architecture', ''))
            ws.cell(row=row, column=7, value=host.get('total_updates', 0))
            ws.cell(row=row, column=8, value=host.get('security_updates', 0))
            ws.cell(row=row, column=9, value=host.get('critical_level', ''))
            ws.cell(row=row, column=10, value='Yes' if host.get('requires_reboot', False) else 'No')
            ws.cell(row=row, column=11, value=host.get('collection_method', ''))
            ws.cell(row=row, column=12, value=host.get('status', ''))
            ws.cell(row=row, column=13, value=host.get('error_message', ''))
            
            # Color coding based on critical level
            critical_level = host.get('critical_level', '')
            if critical_level == 'HIGH':
                fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
            elif critical_level == 'MEDIUM':
                fill = PatternFill(start_color="FFFFCC", end_color="FFFFCC", fill_type="solid")
            else:
                fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
            
            for col in range(1, len(headers) + 1):
                ws.cell(row=row, column=col).fill = fill
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min((max_length + 2), 50)
            ws.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width
            
    except Exception as e:
        print(f"ERROR in create_hosts_sheet: {str(e)}")
        raise

def create_errors_sheet(wb, data):
    """Create errors worksheet"""
    try:
        ws = wb.create_sheet("Errors")
        
        # Headers
        headers = ["Hostname", "Error Type", "Error Message", "Timestamp"]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
        
        # Error data
        errors = data.get('errors', [])
        for row, error in enumerate(errors, 2):
            ws.cell(row=row, column=1, value=error.get('hostname', ''))
            ws.cell(row=row, column=2, value=error.get('error_type', ''))
            ws.cell(row=row, column=3, value=error.get('error_message', ''))
            ws.cell(row=row, column=4, value=error.get('timestamp', ''))
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min((max_length + 2), 80)
            ws.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width
            
    except Exception as e:
        print(f"ERROR in create_errors_sheet: {str(e)}")
        raise

def create_packages_sheet(wb, data):
    """Create packages worksheet"""
    try:
        ws = wb.create_sheet("Packages")
        
        # Headers
        headers = [
            "Hostname", "Package Name", "Current Version", "Available Version", 
            "Architecture", "Is Security", "Requires Reboot", "Repository"
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
        
        # Package data
        row = 2
        hosts = data.get('hosts', [])
        for host in hosts:
            hostname = host.get('hostname', '')
            packages = host.get('packages', [])
            
            for package in packages:
                ws.cell(row=row, column=1, value=hostname)
                ws.cell(row=row, column=2, value=package.get('name', ''))
                ws.cell(row=row, column=3, value=package.get('current_version', ''))
                ws.cell(row=row, column=4, value=package.get('available_version', ''))
                ws.cell(row=row, column=5, value=package.get('architecture', ''))
                ws.cell(row=row, column=6, value='Yes' if package.get('is_security', False) else 'No')
                ws.cell(row=row, column=7, value='Yes' if package.get('requires_reboot', False) else 'No')
                ws.cell(row=row, column=8, value=package.get('repository', ''))
                
                # Color coding for security packages
                if package.get('is_security', False):
                    fill = PatternFill(start_color="FFEEEE", end_color="FFEEEE", fill_type="solid")
                    for col in range(1, len(headers) + 1):
                        ws.cell(row=row, column=col).fill = fill
                
                row += 1
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min((max_length + 2), 40)
            ws.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width
            
    except Exception as e:
        print(f"ERROR in create_packages_sheet: {str(e)}")
        raise

if __name__ == "__main__":
    print("Excel Report Generator for Ansible Updates Reporting")
    print("=" * 60)
    
    if len(sys.argv) != 3:
        print("ERROR: Invalid arguments")
        print("Usage: python3 generate_excel.py <input_json> <output_xlsx>")
        print(f"Received {len(sys.argv)} arguments: {sys.argv}")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    print(f"Input file: {input_file}")
    print(f"Output file: {output_file}")
    
    if not os.path.exists(input_file):
        print(f"ERROR: Input file not found: {input_file}")
        sys.exit(1)
    
    print("Starting Excel report generation...")
    success = create_excel_report(input_file, output_file)
    
    if success:
        print("Excel report generation completed successfully!")
        sys.exit(0)
    else:
        print("Excel report generation failed!")
        sys.exit(1)