---
# AWX Compatibility Test Playbook

- name: "AWX Compatibility Tests"
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/awx_mode.yml
  tasks:
    - name: "Test 1: AWX Environment Detection"
      block:
        - name: "Set test environment variables"
          set_fact:
            test_awx_host: "https://awx.example.com"
            test_job_id: "test_job_123"
          
        - name: "Simulate AWX environment"
          set_fact:
            AWX_HOST: "{{ test_awx_host }}"
            JOB_ID: "{{ test_job_id }}"
          environment:
            AWX_HOST: "{{ test_awx_host }}"
            JOB_ID: "{{ test_job_id }}"
            
        - name: "Verify AWX detection"
          assert:
            that:
              - lookup('env', 'AWX_HOST') | length > 0 or awx_execution_mode is defined
              - awx_job_id is defined
            fail_msg: "AWX environment detection failed"
            success_msg: "AWX environment successfully detected"
      tags: [test, awx, detection]

    - name: "Test 2: Artifact Directory Creation"
      block:
        - name: "Create test artifact directory"
          file:
            path: "/tmp/test_awx_artifacts"
            state: directory
            mode: '0755'
            
        - name: "Verify artifact directory"
          stat:
            path: "/tmp/test_awx_artifacts"
          register: artifact_dir_check
          
        - name: "Assert artifact directory exists"
          assert:
            that:
              - artifact_dir_check.stat.exists
              - artifact_dir_check.stat.isdir
            fail_msg: "Artifact directory creation failed"
            success_msg: "Artifact directory created successfully"
            
        - name: "Cleanup test directory"
          file:
            path: "/tmp/test_awx_artifacts"
            state: absent
      tags: [test, awx, artifacts]

    - name: "Test 3: Fact Caching Compatibility"
      block:
        - name: "Set cacheable fact"
          set_fact:
            test_cached_fact: "test_value_{{ ansible_date_time.epoch }}"
            cacheable: yes
            
        - name: "Verify fact is set"
          assert:
            that:
              - test_cached_fact is defined
              - test_cached_fact | length > 0
            fail_msg: "Fact caching failed"
            success_msg: "Fact caching works correctly"
      tags: [test, awx, facts]

    - name: "Test 4: Set Stats Functionality"
      block:
        - name: "Set test statistics"
          set_stats:
            data:
              test_stats:
                status: "running"
                test_count: 4
              test_artifacts:
                test_file: "/tmp/test_artifact.json"
            per_host: false
          register: stats_result
          failed_when: false
          
        - name: "Verify stats can be set"
          debug:
            msg: "Set stats functionality is available"
      tags: [test, awx, stats]

    - name: "Test 5: Container Runtime Detection"
      block:
        - name: "Check for podman"
          command: which podman
          register: podman_check
          failed_when: false
          changed_when: false
          
        - name: "Check for docker"
          command: which docker
          register: docker_check
          failed_when: false
          changed_when: false
          
        - name: "Display container runtime"
          debug:
            msg: |
              Container runtime detection:
              - Podman: {{ 'Available' if podman_check.rc == 0 else 'Not Available' }}
              - Docker: {{ 'Available' if docker_check.rc == 0 else 'Not Available' }}
              - Selected: {{ 'podman' if podman_check.rc == 0 else ('docker' if docker_check.rc == 0 else 'none') }}
      tags: [test, awx, container]

    - name: "Test 6: Report Generation Paths"
      block:
        - name: "Set test paths"
          set_fact:
            test_reports_path: "/tmp/test_reports"
            test_host_reports: "/tmp/test_reports/hosts"
            test_consolidated_reports: "/tmp/test_reports/consolidated"
            
        - name: "Create test directories"
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - "{{ test_reports_path }}"
            - "{{ test_host_reports }}"
            - "{{ test_consolidated_reports }}"
            
        - name: "Create test report file"
          copy:
            content: |
              {
                "test": true,
                "timestamp": "{{ ansible_date_time.iso8601 }}",
                "message": "AWX compatibility test report"
              }
            dest: "{{ test_reports_path }}/test_report.json"
            mode: '0644'
            
        - name: "Verify report file"
          stat:
            path: "{{ test_reports_path }}/test_report.json"
          register: report_check
          
        - name: "Assert report creation"
          assert:
            that:
              - report_check.stat.exists
              - report_check.stat.size > 0
            fail_msg: "Report file creation failed"
            success_msg: "Report file created successfully"
            
        - name: "Cleanup test files"
          file:
            path: "{{ test_reports_path }}"
            state: absent
      tags: [test, awx, reports]

    - name: "Test 7: Dual Mode Execution"
      block:
        - name: "Test standard mode variables"
          set_fact:
            test_mode: "standard"
            is_awx_environment: false
            
        - name: "Verify standard mode"
          assert:
            that:
              - not is_awx_environment
            fail_msg: "Standard mode detection failed"
            success_msg: "Standard mode works correctly"
            
        - name: "Test AWX mode variables"
          set_fact:
            test_mode: "awx"
            is_awx_environment: true
            
        - name: "Verify AWX mode"
          assert:
            that:
              - is_awx_environment
            fail_msg: "AWX mode detection failed"
            success_msg: "AWX mode works correctly"
      tags: [test, awx, dual_mode]

    - name: "Test 8: Localhost Delegation Control"
      block:
        - name: "Test with delegation disabled"
          set_fact:
            disable_localhost_delegation: true
            test_delegation: "disabled"
            
        - name: "Verify delegation control"
          assert:
            that:
              - disable_localhost_delegation
            fail_msg: "Delegation control failed"
            success_msg: "Delegation control works correctly"
            
        - name: "Test with delegation enabled"
          set_fact:
            disable_localhost_delegation: false
            test_delegation: "enabled"
            
        - name: "Create test file with conditional delegation"
          copy:
            content: "test"
            dest: "/tmp/delegation_test.txt"
          delegate_to: "{{ 'localhost' if not disable_localhost_delegation else omit }}"
          
        - name: "Cleanup test file"
          file:
            path: "/tmp/delegation_test.txt"
            state: absent
          failed_when: false
      tags: [test, awx, delegation]

    - name: "Test Summary"
      debug:
        msg: |
          AWX Compatibility Test Results
          ==============================
          ✓ AWX Environment Detection
          ✓ Artifact Directory Creation
          ✓ Fact Caching Compatibility
          ✓ Set Stats Functionality
          ✓ Container Runtime Detection
          ✓ Report Generation Paths
          ✓ Dual Mode Execution
          ✓ Localhost Delegation Control
          
          All compatibility tests passed successfully!
      tags: [test, summary]